<h1 class = 'route-settings-title'>
  {{t 'routes.settings.title'}}
</h1>{{! title }}



<div class='route-settings-settingsGroup _baking'>

  <h2 class='route-settings-settingsGroup-title'>
    System
  </h2>



  {{#each (array
    'maxTempBeforeTimer'
    'maxTempBeforeBaking'
    'maxTempAfterBaking'
    'maxTempDurationMins'
  ) as |fieldName|}}
    {{settings-field-input-button
      class     = "route-settings-field"
      fieldName = fieldName
      type      = 'number'

      node         = (get zen.state.settings (concat fieldName 'Component'))
      defaultValue = (get zen.state.settingsData fieldName)

      label       = (t (concat 'routes.settings.fields.' fieldName '.label'))
      description = (t (concat 'routes.settings.fields.' fieldName '.description'))

      requestIsPending  = zen.state.settingsData.globalBakingConfigIsPending
      requestIsRejected = (and
        (eq zen.state.settings.lastUpdatedGBCAttr fieldName)
        zen.state.settingsData.globalBakingConfigIsRejected
      )

      errorLabel = (t
        'routes.settings.error'
        field='globalBakingConfig'
        error=(error zen.state.settingsData.globalBakingConfigError)
      )

      submitAction = (action 'setGlobalBakingConfig' fieldName)
    }}
  {{/each}}{{! fieldName}}


{{!--
  {{settings-field-input-button
    class     = "route-settings-field"
    fieldName = 'maxTempBeforeBaking'
    type      = 'number'

    node         = zen.state.settings.maxTempBeforeBakingComponent
    defaultValue = zen.state.settingsData.maxTempBeforeBaking

    label       = (t 'routes.settings.fields.maxTempBeforeBaking.label')
    description = (t 'routes.settings.fields.maxTempBeforeBaking.description')

    requestIsPending  = zen.state.settingsData.globalBakingConfigIsPending
    requestIsRejected = zen.state.settingsData.globalBakingConfigIsRejected

    errorLabel = (t
      'routes.settings.error'
      field='globalBakingConfig'
      error=(error zen.state.settingsData.globalBakingConfigError)
    )

    submitAction = (action 'setGlobalBakingConfig' 'maxTempBeforeBaking')
  }}{{! maxTempBeforeBaking }}



  {{settings-field-input-button
    class     = "route-settings-field"
    fieldName = 'maxTempAfterBaking'
    type      = 'number'

    node         = zen.state.settings.maxTempAfterBakingComponent
    defaultValue = zen.state.settingsData.maxTempAfterBaking

    label       = (t 'routes.settings.fields.maxTempAfterBaking.label')
    description = (t 'routes.settings.fields.maxTempAfterBaking.description')

    requestIsPending  = zen.state.settingsData.globalBakingConfigIsPending
    requestIsRejected = zen.state.settingsData.globalBakingConfigIsRejected

    errorLabel = (t
      'routes.settings.error'
      field='globalBakingConfig'
      error=(error zen.state.settingsData.globalBakingConfigError)
    )

    submitAction = (action 'setGlobalBakingConfig' 'maxTempAfterBaking')
  }}{{! maxTempAfterBaking }}



  {{settings-field-input-button
    class     = "route-settings-field"
    fieldName = 'maxTempDurationMins'
    type      = 'number'

    node         = zen.state.settings.maxTempDurationMinsComponent
    defaultValue = zen.state.settingsData.maxTempDurationMins

    label       = (t 'routes.settings.fields.maxTempDurationMins.label')
    description = (t 'routes.settings.fields.maxTempDurationMins.description')

    requestIsPending  = zen.state.settingsData.globalBakingConfigIsPending
    requestIsRejected = zen.state.settingsData.globalBakingConfigIsRejected

    errorLabel = (t
      'routes.settings.error'
      field='globalBakingConfig'
      error=(error zen.state.settingsData.globalBakingConfigError)
    )

    submitAction = (action 'setGlobalBakingConfig' 'maxTempDurationMins')
  }}{{! maxTempDurationMins }}
--}}
</div>{{! settingsGroup _baking }}



<div class='route-settings-settingsGroup _system'>

  <h2 class='route-settings-settingsGroup-title'>
    System
  </h2>

  {{#settings-field
    fieldName   = 'locale'
    label       = (t 'routes.settings.fields.locale.label')
    description = (t 'routes.settings.fields.locale.description')

    requestIsPending  = zen.state.settingsData.localeIsPending
    requestIsRejected = zen.state.settingsData.localeIsRejected

    errorLabel = (t
      'routes.settings.error'
      field='locale'
      error=(or zen.state.settingsData.localeError.error_text zen.state.settingsData.localeError)
    )
  }}
    {{#power-select
      class    = 'route-settings-setting-field'
      tagName  = 'div'
      selected = zen.state.settingsData.localeResponse
      options  = intl.locales
      onchange = (action (dispatch-action) zen.state.settingsData 'setLocale')
      as |locale|
    }}
      {{t (concat 'domain.locale.' locale)}}
    {{/power-select}}
  {{/settings-field}}{{! locale }}



  {{#settings-field
    fieldName   = 'timezone'
    label       = (t 'routes.settings.fields.timezone.label')

    requestIsPending  = zen.state.settingsData.timezoneIsPending
    requestIsRejected = zen.state.settingsData.timezoneIsRejected

    errorLabel = (t
      'routes.settings.error'
      field='timezone'
      error=(or zen.state.settingsData.timezoneError.error_text zen.state.settingsData.timezoneError)
    )
  }}
    {{#power-select
      class    = 'route-settings-setting-field'
      tagName  = 'div'
      selected = zen.state.settingsData.timezoneResponse
      options  = timezones
      onchange = (action (dispatch-action) zen.state.settingsData 'setTimezone')
      as |timezone|
    }}
      {{timezone}}
    {{/power-select}}
  {{/settings-field}}{{! timezone }}



  {{#settings-field
    fieldName   = 'password'
    label       = (t 'domain.login.password')

    requestIsPending  = zen.state.settingsData.passwordIsPending
    requestIsRejected = zen.state.settingsData.passwordIsRejected

    errorLabel = (t
      'routes.settings.error'
      field='password'
      error=(or zen.state.settingsData.passwordError.error_text zen.state.settingsData.passwordError)
    )
  }}
    <label class='route-settings-setting-label'>
      {{t 'domain.login.old-password'}}
    </label>

    {{one-way-input
      type   = 'password'
      value  = zen.state.settings.oldPasswordUserInput
      update = (action
        (dispatch-set)
        zen.state.settings
        'old password user input'
        'oldPasswordUserInput'
      )
    }}

    <label class='route-settings-setting-label'>
      {{t 'domain.login.new-password'}}
    </label>

    {{one-way-input
      type   = 'password'
      value  = zen.state.settings.newPasswordUserInput
      update = (action
        (dispatch-set)
        zen.state.settings
        'new password user input'
        'newPasswordUserInput'
      )
    }}

    <button
      {{action
        (dispatch-action)
        zen.state.settingsData
        'setPassword'
        zen.state.settings.oldPasswordUserInput
        zen.state.settings.newPasswordUserInput
      }}
    >
      {{t 'domain.forms.save'}}
    </button>
  {{/settings-field}}{{! password }}



</div>{{! settingsGroup _system }}

