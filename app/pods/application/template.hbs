{{trigger (action 'didReceiveQueryParams')}}

<div class='route-application'>

  <header class = 'route-application-header'>

    <div class='route-application-header-item _left'>
      <h2 class='route-application-title'>
        Open Bread Maker
      </h2>
    </div>{{! header-item _left }}

    <div class='route-application-header-item _right'>
      <div class = 'route-application-menu'>
        {{link-to (t 'routes.application.menu.chart') 'index'
          class = 'route-application-menu-item _chart'
        }}

        {{#if session.isAuthenticated}}
          {{link-to (t 'routes.application.menu.programs') 'programs'
            class = 'route-application-menu-item _programs'
          }}

          {{link-to (t 'routes.application.menu.settings') 'settings'
            class = 'route-application-menu-item _settings'
          }}

          <a
            class = 'route-application-menu-item _logout'
            href
            {{action 'invalidateSession'}}
          >
            {{t 'domain.login.logout'}}
          </a>
        {{else}}
          {{link-to (t 'domain.login.login') 'login'
            class = 'route-application-menu-item _login'
          }}
        {{/if}}
      </div>{{! menu }}
    </div>{{! header-item _right }}

  </header>{{! header }}



  <div class='route-application-main'>

    <aside class='route-application-sidebar'>
      {{#if status.statsContent}}
        {{stats-x status=status.lastStatus}}
      {{else if status.statsProxy.isPending}}
        <p>
          {{t 'routes.application.sidebar.stats-loading'}}
        </p>
      {{/if}}{{! status.statsContent }}

      {{#if status.statsReason}}
        <div class = 'route-application-statsError'>
          <p class = 'route-application-statsError-message'>
            {{t 'routes.application.sidebar.stats-error' error=(error status.statsReason)}}
          </p>

          {{#if status.statsContent}}
            <p class = 'route-application-statsError-time'>
             {{t
               'routes.application.sidebar.stats-outdated'
               time=(moment-from-now (moment timeMs) (now interval=1000))
             }}
            </p>
          {{/if}}{{! status.statsContent }}
        </div>{{! route-application-statsError }}
      {{/if}}{{! status.statsReason }}

      <label class='route-application-autoUpdate'>
        {{one-way-checkbox
          checked = pollingEffective
          update  = (action 'updatePolling')
        }}

        <span>
          {{t 'routes.application.sidebar.auto-update'}}
        </span>
      </label>

      {{#if (and session.isAuthenticated (eq status.lastStatus.state 'idle'))}}
        <div>
          <button
            class = 'route-application-start'
            {{action (toggle 'isStartModalVisible' this)}}
          >
            {{t 'routes.application.sidebar.bake'}}
          </button>
        </div>
      {{/if}}
    </aside>{{! sidebar }}


    <main class= 'route-application-content'>
      {{liquid-outlet class = '-horizontal'}}
    </main>{{! content }}

  </div>{{! main }}

</div>{{! route-application }}

{{ember-dialogs}}

{{#if isStartModalVisible}}
  {{#modal-x
    backdropAction = (toggle 'isStartModalVisible' this)

    buttons = (array
      (hash
        label  = 'OK'
        action = (action 'startProgram')
      )

      (hash
        label  = 'Cancel'
        action = (toggle 'isStartModalVisible' this)
      )
    )
  }}
    <div class = 'route-application-startModal-message'>
      {{t 'routes.application.choose-program.message'}}
    </div>{{! startModal-message }}

    {{one-way-select
      class = 'route-application-startModal-programs'

      options = programs
      value   = userSelectedProgram

      optionLabelPath = 'nameWithHumanId'
      optionValuePath = 'id'

      update = (action (mut userSelectedProgram))
    }}
  {{/modal-x}}
{{/if}}